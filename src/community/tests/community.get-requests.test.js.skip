// src/community/tests/community.get-requests.test.js

// Mock dependencies
jest.mock("../models/community.model");
jest.mock("../../utils/ApiError");

// Import dependencies
const communityModel = require("../models/community.model");
const ApiError = require("../../utils/ApiError");

// Import the controller directly
const communityController = require("../controllers/community.controller");

describe("Community Get Join Requests API", () => {
    // Test community data
    const testCommunity = {
        id: 1,
        name: "Test Community",
        unique_url: "test-community",
        is_private: true,
        is_active: true,
    };

    // Mock join requests data
    const mockRequests = [];
    for (let i = 1; i <= 3; i++) {
        mockRequests.push({
            id: i,
            community_id: 1,
            user_id: 10 + i,
            message: `Request message ${i}`,
            status: "pending",
            created_at: new Date().toISOString(),
            full_name: `User ${10 + i}`,
            email: `user${10 + i}@example.com`,
            user_url: `user-${10 + i}`,
        });
    }

    // Setup before each test
    beforeEach(() => {
        // Clear all mocks
        jest.clearAllMocks();

        // Setup ApiError mock
        ApiError.mockImplementation((message, statusCode) => {
            const error = new Error(message);
            error.statusCode = statusCode;
            return error;
        });

        // Mock finding communities
        communityModel.findByIdentifier = jest
            .fn()
            .mockResolvedValue(testCommunity);

        // Not admin by default
        communityModel.checkMemberRole = jest.fn().mockResolvedValue(false);

        // Mock join requests
        communityModel.getJoinRequests = jest
            .fn()
            .mockResolvedValue(mockRequests);
        communityModel.countJoinRequests = jest.fn().mockResolvedValue(5);
    });

    describe("getJoinRequests controller method", () => {
        it("should successfully get join requests for admins", async () => {
            // Make user an admin
            communityModel.checkMemberRole.mockResolvedValue(true);

            // Mock request and response
            const req = {
                params: { id: 1 },
                user: { id: 1 },
                query: {},
            };

            const res = {
                json: jest.fn(),
            };

            const next = jest.fn();

            // Call controller method directly
            await communityController.getJoinRequests(req, res, next);

            // Assertions
            expect(res.json).toHaveBeenCalled();
            const responseData = res.json.mock.calls[0][0];
            expect(responseData.status).toBe("success");
            expect(Array.isArray(responseData.data)).toBeTruthy();
            expect(responseData.pagination).toBeDefined();
            expect(responseData.pagination.total).toBe(5);
            expect(communityModel.getJoinRequests).toHaveBeenCalled();
        });

        it("should handle pagination parameters", async () => {
            // Make user an admin
            communityModel.checkMemberRole.mockResolvedValue(true);

            // Mock request with pagination
            const req = {
                params: { id: 1 },
                user: { id: 1 },
                query: {
                    limit: "2",
                    offset: "2",
                },
            };

            const res = {
                json: jest.fn(),
            };

            const next = jest.fn();

            // Call controller method directly
            await communityController.getJoinRequests(req, res, next);

            // Assertions
            expect(communityModel.getJoinRequests).toHaveBeenCalledWith(1, {
                limit: 2,
                offset: 2,
            });
        });

        it("should handle missing user", async () => {
            // Mock request without user
            const req = {
                params: { id: 1 },
                // No user property
            };

            const res = {};
            const next = jest.fn();

            // Call controller method directly
            await communityController.getJoinRequests(req, res, next);

            // Assertions
            expect(next).toHaveBeenCalled();
            expect(ApiError).toHaveBeenCalledWith(expect.any(String), 401);
        });

        it("should return 404 if community doesn't exist", async () => {
            // Mock community not found
            communityModel.findByIdentifier.mockResolvedValue(null);

            // Mock request and response
            const req = {
                params: { id: 999 },
                user: { id: 1 },
            };

            const res = {};
            const next = jest.fn();

            // Call controller method directly
            await communityController.getJoinRequests(req, res, next);

            // Assertions
            expect(next).toHaveBeenCalled();
            expect(ApiError).toHaveBeenCalledWith(expect.any(String), 404);
        });

        it("should return 403 if user is not an admin", async () => {
            // Not admin (default mock is already false)

            // Mock request and response
            const req = {
                params: { id: 1 },
                user: { id: 2 }, // Different user
            };

            const res = {};
            const next = jest.fn();

            // Call controller method directly
            await communityController.getJoinRequests(req, res, next);

            // Assertions
            expect(next).toHaveBeenCalled();
            expect(ApiError).toHaveBeenCalledWith(
                expect.stringContaining("permission"),
                403
            );
        });
    });
});
